from pyautogui import click, sleep, PyAutoGUIException

cps, kot1or0, infclicks = 0, 0, False
b64_pin = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAALVSURBVDhPrZTPTxNREMdnF2h3+wOB0BJFTYxEJZgeiOGHxIMJJBw8mHjSg4l6MFEOHAxRryoejBcOEk4e1YNHE/kHJEFIgFhDIZFgbQgFSne3u9vd7nvPecujoFRqop9ksjPT2W/nvXlvJRDQoaF6aWPjPqyuXmO6fobZtkss69O6aT45USh8FmVV8QXZyEg3LC29h1SqFUwTE8z/kT8Lpul8MYzLvZ43tZM8HJk9f34alpcnYX6+FQqFPTGOJEFYVYMRWX4oMlWRYW3tKSSTR8DzROpXJBRlktQqwqrIkMkMQLEowoOU8I80QmZFWBUZdN0V/gEYpfDdMLwNQl6KVFUk2tPzTMpmH0OpJFI7EOwsrWlQtG0IMfZO6eh4EIvHu0DTzjPTVD3LSm/Z9sdjm5vfxCs+UqG9vTZgGKPgukMYqyVCQHddmrNtOYiiKiZltJpQCKLxOCi4p4Cd8+G5WJcxzfGvrjt8xXH8IZTP4XQoFFIIOWdRyrYJWWmn9E0AYJAXcEFu3A9EoxBtaEBvB8t1IZnPv+hynBEelwV/Z72//yTMzKxI+by8K8qf3NRYDIKKgh5vlEFqe9uesu3m25RavK4i8c7Oew2xmMyPzX4x3+fLFnAvWFOjBhk7zuOKgmR0FCCdvhnA5Sj19WUh38JhCASDvKyMSQjBK7HO/YqCTNPCkMsd5RsfQUGlqQlqIxEINDdDBP39ODi4rOtO3mVM43FFwZKuWzjCnAhBxa7CjY2gqHzme1Cc9rKu21nP8wfCqSiojo8zVixOQF2dyByE36BFvGGZvr5H1xlLirS/PRWxE4lArWG8ll33xu4Q+ET5Od1CodVIJMXGxs7WtbVxsQtdiYR/f/8oyHnb0gK9jnMR13a1ROmpIqUlw/MWtwj5kGJs9tLc3C0se4U2gYLD/kv/yvTCQjfaD7RBHh/a4d+CYvzzxju9818EOSiKVwcGfgIZz0q94tsQ2gAAAABJRU5ErkJggg=='
b64icon = b'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'


def clicks(clicks, interval, wait):
    sleep(int(wait))
    try:
        click(None, None, clicks=int(clicks), interval=float(interval))
    except PyAutoGUIException:
        print("Stopped clicking")               # stops clicking if the fail-safe is triggered


def infiniteClicks(interval, wait):
    sleep(int(wait))
    try:
        click(None, None, 9999999, interval=float(interval))
    except PyAutoGUIException:
        print("Stopped clicking")               # stops clicking if the fail-safe is triggered


def updateValues(*keys_and_update_values: tuple, window_name):
    for arg in keys_and_update_values:          # the * is a tuple containing (key of inputBox, update_value)
        window_name[arg[0]].update(arg[1])      # this function updates the input box with the update value given


def keepFirstChar(window_name, values_var, *keys_and_kept_value: tuple, inf_on: bool):
    for key in keys_and_kept_value:
        if key[0] == "__CLICKS__" and inf_on:               # update with the infinity symbol for each event if inf_on
            window_name[key[0]].update("∞")                 # is true and the key is __CLICKS__
            continue

        if str(values_var[key[0]]) is "":                   # replaces the empty space with the default value
            window_name[key[0]].update(key[1])


def deleteLetters(window_name, values_var, inf_on: bool, *keys):
    for key in keys:
        if key == "__CLICKS__" and inf_on:                  # update with the infinity symbol for each event if inf_on
            window_name[key].update("∞")                    # is true and the key is __CLICKS__
            continue

        if not str(values_var[key]).isdigit():              # delete last character if it is not a digit
            if str(values_var[key]).__contains__("."):      # continue if it contains a period (.) to use for interval
                continue                                    # or wait time
            window_name[key].update(values_var[key][:-1])

